{"version":3,"sources":["components/Section/section.js","components/Notification/notification.js","components/Statistics/statictics.js","components/FeedbackOptions/feedbackOptions.js","App.js","reportWebVitals.js","index.js","components/Statistics/statistics.module.css","components/FeedbackOptions/feedbackOptions.module.css"],"names":["Section","title","children","Notification","message","Statistics","good","neutral","bad","total","positiveFeedbackPercentage","className","s","box","options","FeedbackOptions","onLeaveFeedback","map","option","button","type","data-feedback","onClick","App","state","countTotalFeedback","countPositiveFeedbackPercentage","totalFeedback","Math","round","handleFeedback","feedback","target","dataset","setState","prevState","this","totalFeedbackCount","positiveFeedback","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"gQAceA,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,gCACE,6BAAKD,IACJC,M,gBCHU,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,ICCb,IAgCeC,EAhCI,SAAC,GAAD,IACjBC,EADiB,EACjBA,KACAC,EAFiB,EAEjBA,QACAC,EAHiB,EAGjBA,IACAC,EAJiB,EAIjBA,MACAC,EALiB,EAKjBA,2BALiB,OAOjB,mCACGD,EACC,qBAAIE,UAAWC,IAAEC,IAAjB,UACE,qBAAIF,UAAWC,IAAEE,QAAjB,mBAAiCR,EAAjC,OACA,qBAAIK,UAAWC,IAAEE,QAAjB,sBAAoCP,EAApC,OACA,qBAAII,UAAWC,IAAEE,QAAjB,kBAAgCN,EAAhC,OACA,qBAAIG,UAAWC,IAAEE,QAAjB,oBAAkCL,EAAlC,OACA,qBAAIE,UAAWC,IAAEE,QAAjB,gCACsBJ,EADtB,UAKF,cAACP,EAAD,CAAcC,QAAQ,yB,gBCEbW,EArBS,SAAC,GAAD,IAAGD,EAAH,EAAGA,QAASE,EAAZ,EAAYA,gBAAZ,OACtB,qBAAKL,UAAWC,IAAEE,QAAlB,SACGA,EAAQG,KAAI,SAACC,GAAD,OACX,wBACEP,UAAWC,IAAEO,OACbC,KAAK,SACLC,gBAAeH,EACfI,QAASN,EAJX,SAOGE,GAFIA,SCPPJ,EAAU,CAAC,OAAQ,MAAO,WAsDjBS,E,4MAnDbC,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPiB,mBAAqB,WAAO,IAAD,EACM,EAAKD,MAA5BlB,EADiB,EACjBA,KAAMC,EADW,EACXA,QACd,OAAOD,EAFkB,EACFE,IACHD,G,EAGtBmB,gCAAkC,WAChC,IAAIC,EAAgB,EAAKF,qBACjBnB,EAAS,EAAKkB,MAAdlB,KACR,OAAOsB,KAAKC,MAAOvB,EAAOqB,EAAiB,M,EAG7CG,eAAiB,YAAiB,IACxBC,EADuB,EAAbC,OACUC,QAApBF,SACR,EAAKG,UAAS,SAACC,GACb,OAAO,eAAGJ,EAAWI,EAAUJ,GAAY,O,uDAIrC,IAAD,EACwBK,KAAKZ,MAA5BlB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjB6B,EAAqBD,KAAKX,qBAC1Ba,EAAmBF,KAAKV,kCAE9B,OACE,qCACE,cAAC,EAAD,CAASzB,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEa,QAASA,EACTE,gBAAiBoB,KAAKN,mBAG1B,cAAC,EAAD,CAAS7B,MAAO,aAAhB,SACE,cAAC,EAAD,CACEK,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO4B,EACP3B,2BAA4B4B,a,GA5CtBC,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,IAAM,wBAAwB,QAAU,8B,kBCA1DD,EAAOC,QAAU,CAAC,QAAU,iCAAiC,OAAS,mC","file":"static/js/main.d4139fd8.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <div>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from \"prop-types\";\r\n\r\nexport default function Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./statistics.module.css\";\r\nimport Notification from \"../Notification/notification\";\r\n\r\nconst Statistics = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positiveFeedbackPercentage,\r\n}) => (\r\n  <>\r\n    {total ? (\r\n      <ul className={s.box}>\r\n        <li className={s.options}> Good:{good} </li>\r\n        <li className={s.options}> Neutral:{neutral} </li>\r\n        <li className={s.options}> Bad:{bad} </li>\r\n        <li className={s.options}> Total:{total} </li>\r\n        <li className={s.options}>\r\n          Positive feedback: {positiveFeedbackPercentage}%\r\n        </li>\r\n      </ul>\r\n    ) : (\r\n      <Notification message=\"No feedback given\" />\r\n    )}\r\n  </>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positiveFeedbackPercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./feedbackOptions.module.css\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <div className={s.options}>\r\n    {options.map((option) => (\r\n      <button\r\n        className={s.button}\r\n        type=\"button\"\r\n        data-feedback={option}\r\n        onClick={onLeaveFeedback}\r\n        key={option}\r\n      >\r\n        {option}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React, { Component } from \"react\";\nimport Section from \"./components/Section/section\";\nimport Statistics from \"./components/Statistics/statictics\";\nimport FeedbackOptions from \"./components/FeedbackOptions/feedbackOptions\";\n\nconst options = [\"good\", \"bad\", \"neutral\"];\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + bad + neutral;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    let totalFeedback = this.countTotalFeedback();\n    const { good } = this.state;\n    return Math.round((good / totalFeedback) * 100);\n  };\n\n  handleFeedback = ({ target }) => {\n    const { feedback } = target.dataset;\n    this.setState((prevState) => {\n      return { [feedback]: prevState[feedback] + 1 };\n    });\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const totalFeedbackCount = this.countTotalFeedback();\n    const positiveFeedback = this.countPositiveFeedbackPercentage();\n\n    return (\n      <>\n        <Section title={\"Please leave feedback\"}>\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.handleFeedback}\n          />\n        </Section>\n        <Section title={\"Statistics\"}>\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={totalFeedbackCount}\n            positiveFeedbackPercentage={positiveFeedback}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"statistics_box__1Rg3N\",\"options\":\"statistics_options__3n_7u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options\":\"feedbackOptions_options__1ty99\",\"button\":\"feedbackOptions_button__PIhVU\"};"],"sourceRoot":""}